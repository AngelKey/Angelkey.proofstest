// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var BaseScraper, RooterScraper, constants, decode, iced, make_esc, v_codes, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  _ref = require('keybase-proofs'), BaseScraper = _ref.BaseScraper, constants = _ref.constants;

  v_codes = constants.v_codes;

  decode = require('pgp-utils').armor.decode;

  make_esc = require('iced-error').make_esc;

  exports.RooterScraper = RooterScraper = (function(_super) {
    __extends(RooterScraper, _super);

    function RooterScraper() {
      return RooterScraper.__super__.constructor.apply(this, arguments);
    }

    RooterScraper.prototype._check_args = function(args) {
      var err;
      err = !(args.username != null) ? new Error("Bad args to rooter proof: no username given") : !(args.name != null) || (args.name !== 'rooter') ? new Error("Bad args to rooter proof: type is " + args.name) : null;
      return err;
    };

    RooterScraper.prototype.url = function(_arg) {
      var parts, post_id, username;
      username = _arg.username, post_id = _arg.post_id;
      parts = ["http://localhost:3000/_/api/1.0/rooter/"];
      parts.push(username);
      if (post_id != null) {
        parts.push("/" + post_id);
      }
      parts.push(".json");
      return parts.join("");
    };

    RooterScraper.prototype.hunt2 = function(_arg, cb) {
      var err, json, name, out, proof_text_check, rc, root, turl, url, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, proof_text_check = _arg.proof_text_check, name = _arg.name;
      rc = v_codes.OK;
      out = {};
      err = this._check_args({
        username: username,
        name: name
      });
      (function(_this) {
        return (function(__iced_k) {
          if (err != null) {
            return __iced_k(rc = v_codes.FAILED_PARSE);
          } else {
            url = _this.url({
              username: username
            });
            console.log("getting url --> " + url);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/proofs-test/src/scrapers/rooter.iced",
                funcname: "RooterScraper.hunt2"
              });
              _this._get_url_body({
                url: url,
                json: true
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    rc = arguments[1];
                    return json = arguments[2];
                  };
                })(),
                lineno: 46
              }));
              __iced_deferrals._fulfill();
            })(function() {
              var _i, _len, _ref1;
              _this.log("| search input -> " + url + " -> " + rc);
              if (rc === v_codes.OK) {
                rc = v_codes.NOT_FOUND;
                _ref1 = json.toots;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  root = _ref1[_i];
                  if (!(toot.post.indexOf(proof_text_check) >= 0)) {
                    continue;
                  }
                  rc = v_codes.OK;
                  turl = _this.url({
                    username: username,
                    post_id: toot.post_id
                  });
                  out.api_url = out.human_url = turl;
                  out.remote_id = toot.post_id;
                  break;
                }
              }
              return __iced_k(out.rc = rc);
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    RooterScraper.prototype._check_api_url = function(_arg) {
      var api_url, rxx, username;
      api_url = _arg.api_url, username = _arg.username;
      rxx = new RegExp("^" + this.url({
        username: username,
        post_id: "[a-zA-Z]+"
      }) + "$");
      return (api_url != null) && api_url.match(rxx);
    };

    RooterScraper.prototype.check_status = function(_arg, cb) {
      var api_url, err, json, proof_text_check, rc, remote_id, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, proof_text_check = _arg.proof_text_check, remote_id = _arg.remote_id;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs-test/src/scrapers/rooter.iced",
            funcname: "RooterScraper.check_status"
          });
          _this._get_url_body({
            url: api_url,
            json: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return json = arguments[2];
              };
            })(),
            lineno: 69
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          rc = rc !== v_codes.OK ? rc : json.post.indexOf(proof_text_check) >= 0 ? v_codes.OK : v_codes.NOT_FOUND;
          return cb(err, rc);
        };
      })(this));
    };

    return RooterScraper;

  })(BaseScraper);

}).call(this);
